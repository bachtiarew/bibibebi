BabysitterSkills = React.createClass
	
	getInitialState: ->
		skills: BabysitterStore.babysitterSkills
		checkedSkills: [false, false, false, false]

	componentDidMount: ->
		BabysitterStore.addChangeListener(@onChange)

	componentWillUnmount: ->
		BabysitterStore.removeChangeListener(@onChange)

	onChange: ->
		@setState(skills: BabysitterStore.babysitterSkills)

	checkSkill: (arrObj) ->
		{checkedSkills} = @state
		tempSkills = []
		i = 1
		while i <= 4
			found = 0 
			_.forEach(arrObj, (e) ->
				if e.id == i
					found++
			)
			
			if found > 0
				tempSkills.push(true)
			else
				tempSkills.push(false)
			i++
		return tempSkills
		
	render: ->
		{skills, checkedSkills, defaultSkills} = @state

		if !_.isEmpty(skills)
			checkedSkills = @checkSkill(skills)
		
		<div className="skills">
			<div className="row">
				<div className={if checkedSkills[0] == false then "col-sm-3 disabled" else "col-sm-3 enabled"}>
					<div className="skill">
						<i className="fa fa-binoculars fa-2x"></i>
					</div>
				</div>
				<div className={if checkedSkills[1] == false then "col-sm-3 disabled" else "col-sm-3 enabled"}>
					<div className="skill">
						<i className="fa fa-automobile fa-2x"></i>
					</div>
				</div>
				<div className={if checkedSkills[2] == false then "col-sm-3 disabled" else "col-sm-3 enabled"}>
					<div className="skill">
						<i className="fa fa-briefcase fa-2x"></i>
					</div>
				</div>
				<div className={if checkedSkills[3] == false then "col-sm-3 disabled" else "col-sm-3 enabled"}>
					<div className="skill">
						<i className="fa fa-birthday-cake fa-2x"></i>
					</div>
				</div>
			</div>
				
		</div>

Profile = React.createClass
	
	getInitialState: ->
		babysitter: BabysitterStore.babysitter
		skills: BabysitterStore.babysitterSkills
		pictures: BabysitterStore.pictures
		user: BabysitterStore.user

	componentDidMount: ->
		BabysitterStore.addChangeListener(@onChange)

	componentWillUnmount: ->
		BabysitterStore.removeChangeListener(@onChange)

	onChange: ->
		@setState(
			babysitter: BabysitterStore.babysitter
			skills: BabysitterStore.babysitterSkills
			pictures: BabysitterStore.pictures
			user: BabysitterStore.user
		)

	onChangeHeader: ->

	render: ->
		{babysitter, pictures, skills, user} = @state
		{id, nik, age, description, price} = babysitter
		{firstname, lastname, borndate, bornplace, gender, address, phone_number} = user
		{pictureId, pictureType, pictureUrl} = pictures
	
		if _.isEmpty(babysitter)
			<div className="blank-page text-center">
				<div>
					<h1>No Profile</h1>
					<h3>you can select the thumbnail to view profile</h3>
					<i className="fa fa-file"></i>
				</div>
			</div>
		else
			<div style={border: "1px"} className="profile">
				<div className="row">
					<div className="col-sm-5 logo-img text-center">
						{
							if pictureUrl?
								<img src={pictureUrl} />
							else
								<i className="fa fa-camera fa-4x"></i>
						}
					</div>
					<div className="col-sm-7 label-profile">
						<p className="name"><strong>{firstname} {lastname}</strong></p>
						<Rateable babysitter={babysitter} rating={rating?} />
						<h4>Rating.{ if rating? then rating else 0 }.0</h4>
						<div className="pull-right">
							<label className="cost">{price}K</label>
							<label className="per">/bulan</label>
						</div>
					</div>
				</div>
				<div className="detail">
						<h5>No NIK : {nik}</h5>
						<h5>Tempat, Tgl lahir : {bornplace}, {borndate}</h5>
						<h5>usia : {age} tahun</h5>
						<h5>NO Telp : {phone_number}</h5>
						<h5>Alamat : {address}</h5>
					
				</div>
				<div className="description">
					<p>{description}</p>
				</div>
				
				<BabysitterSkills />
				<div className="button-action pull-right">
					<button className="btn btn-md btn-success">Recruit</button>
					<button className="btn btn-md btn-default">Save into List</button>
				</div>
			</div>


window.Profile = Profile